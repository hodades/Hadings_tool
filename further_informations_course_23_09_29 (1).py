# -*- coding: utf-8 -*-
"""further informations course 23_09_29

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SfcfDO6qIYxmJTXhJH59zQiz5lJbAhiQ

## Error handling

The key word `try` allows you to test your script.
Then if there is an error, you can handle the message or the action with `except`.
You can precise the type of error after `except` but the action taken will just work on this type of error.
"""

# Whitout error handling
def purchased_but_not_subscribed(customers, newsletter_subscribers):
  result = customers.difference(newsletter_subscribers)
  return  result

purchased_but_not_subscribed(customers=[1,2,3,4,4,5,4,57,], newsletter_subscribers=[1,2,4,6,7,8,8,32,536])

# With error handling
def purchased_but_not_subscribed_error_handling(customers, newsletter_subscribers):
  try: #let's check if the code will run properly
    result = customers.difference(newsletter_subscribers)
  except: # if it doesn't run as expected, write the following message
    result = "Check the data type"
  return  result
purchased_but_not_subscribed_error_handling(customers=[1,2,3,4,4,5,4,57,], newsletter_subscribers=[1,2,4,6,7,8,8,32,536])

"""Library"""

# Import the numpy library with the alias 'np'.
import numpy as np

# Import the 'array' and 'median' modules from numpy.
from numpy import array, median

# Import the pandas library with the alias 'pd'.
import pandas as pd

# The code above imports the numpy and pandas libraries,
# allowing you to use their functionalities in the subsequent code.

# Create an array 'x' using the 'array' function from numpy.
x = array([2, 3, 4, 5, 6, 67])

# Check the data type of the variable 'x'.
type(x)

# Calculate the median of the list [2, 3, 4, 5, 6, 67] using the 'median' function from numpy.
median([2, 3, 4, 5, 6, 67])

"""# Set"""

# Create an empty set 's' using set() constructor.
s = set()

# Alternatively, create an empty set 's' using curly braces ({}).
s = {}

# Create a set 's1' containing elements 2, 4, and 5.
s1 = {2, 4, 5}

# Create another set 's2' containing elements 2, 6, and 9.
s2 = {2, 6, 9}

# Create a list 'l' containing repeated elements 2, 2, 2, 2, 4, and 5.
l = [2, 2, 2, 2, 4, 5]

# Convert the list 'l' to a set 's_to_l', removing duplicates.
s_to_l = set(l)

# Print the original list 'l'.
print(l)  # Output: [2, 2, 2, 2, 4, 5]

# Print the length of the original list 'l'.
print(len(l))  # Output: 6

# Print the set 's_to_l' containing unique elements from the list.
print(s_to_l)  # Output: {2, 4, 5}

# Print the length of the set 's_to_l'.
print(len(s_to_l))  # Output: 3

# Calculate the set difference between 's1' and 's2'.
s1.difference(s2)

# Calculate the intersection of sets 's1' and 's2'.
s1.intersection(s2)

# Calculate the union of sets 's1' and 's2'.
s1.union(s2)

"""# The methods"""

# Create a new list 'new_list2' containing integers and a string.
new_list2 = [1, 2, "e"]

# Print the 'new_list2' to display its current contents.
print(new_list2)

# Add the item "Hello" to the end of the list using the 'append' method.
new_list2.append("Hello")
print(new_list2)

# Remove the last item added to the list using the 'pop' method.
print(new_list2.pop())
print(new_list2)

# To find the index of a specific element, we use the 'index' method.
# In this case, we want to find the position of "e".
new_list2.index("e")

# To remove a specific element from the list, we use the 'remove' method.
# Let's remove the integer 1 from the list.
new_list2.remove(1)
print(new_list2)