# -*- coding: utf-8 -*-
"""Activity 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EIu4kzJpApAcBKLsDKPRKFDXN6M2ySaj
"""

# Activity 1
# Definition de la variable monthly_savings avec une valeur de 100 euros par mois
monthly_savings = 100

# Définition de la variable num_months avec une valeur de 12 (nombre de mois dans une année)
num_months = 12

# Définition de la variable intro avec une chaîne de caractères "How are you?"
intro = "How are you?"

# Calcul de year_savings en multipliant monthly_savings par num_months
year_savings = monthly_savings * num_months
# Affichage de year_savings
print(year_savings)

# Affichage du type de year_savings
print("Type de year_saving:", type(year_savings))

# Concaténation de intro avec elle-même et stockage dans la variable doubleintro
doubleintro = intro + intro

# Affichage de doubleintro
print("doubleintro:", doubleintro)

# Correction de l'affichage en concaténant intro, un espace, et doubleintro
Sum_of_intro = intro + " " + doubleintro
print(Sum_of_intro)

# Calcul de l'économie annuelle après avoir retiré 150 euros
year_savings_after_withdrawal = (monthly_savings * num_months) - 150
print(year_savings_after_withdrawal)

# Calcul de l'économie sur 100 mois avec une expression exponentielle
reponse8 = monthly_savings ** 100
print(reponse8)

# Définition de la hauteur (en centimètres)
height = 175

# Définition de la hauteur du chapeau (en centimètres)
hat_height = 10

# Calcul de la taille avec un chapeau en ajoutant height et hat_height, puis en divisant par 100
tall_with_hat = (height + hat_height) / 100

# Affichage de la phrase complète
print("Je mesure", tall_with_hat, "mètres quand je porte mon chapeau")

# Ajout d'une docstring pour expliquer la fonction
def calculate_tall_with_hat(height, hat_height):
    """
    Calcule la taille avec un chapeau en ajoutant la hauteur et la hauteur du chapeau, puis en divisant par 100.

    Parameters:
    height (float): La hauteur de la personne en centimètres.
    hat_height (float): La hauteur du chapeau en centimètres.

    Returns:
    float: La taille totale avec un chapeau en mètres.
    """
    tall_with_hat = (height + hat_height) / 100
    return tall_with_hat

# Utilisation de la fonction help pour obtenir des informations sur la fonction
help(calculate_tall_with_hat)

# Activity 2

# Définition d'une fonction euro_dollars qui convertit l'euro en dollars
def euro_dollars(amount_euros):
    """
    Convertit une quantité d'euros en dollars en utilisant le taux de change actuel.

    Parameters:
    amount_euros (float): Montant en euros.

    Returns:
    float: Montant équivalent en dollars.
    """
    final_amount = amount_euros * 1.06
    return final_amount

# Tests avec différentes quantités en euros
print(euro_dollars(amount_euros=1))
print(euro_dollars(3.5))
print(euro_dollars(amount_euros=10))

# Définition d'une fonction dollars_euro qui convertit les dollars en euros
def dollars_euro(dollar):
    """
    Convertit une quantité de dollars en euros en utilisant le taux de change actuel.

    Parameters:
    dollar (float): Montant en dollars.

    Returns:
    float: Montant équivalent en euros.
    """
    return dollar * 0.84

# Tests avec différentes quantités en dollars
dollars_euro(1)
dollars_euro(3.5)
dollars_euro(10)

# Fonction qui bascule entre les fonctions euro_dollars et dollars_euro en fonction de la devise à convertir
def convert_euro_dollar(amount, is_dollar=True):
    """
    Convertit une quantité d'une devise en une autre.

    Parameters:
    amount (float): Montant à convertir.
    is_dollar (bool): True si la devise d'origine est le dollar, False si c'est l'euro.

    Returns:
    float: Montant converti.
    """
    if is_dollar:
        res = dollars_euro(amount)
    else:
        res = euro_dollars(amount)
    return res

#Activity 2
# Definition of a function euro_dollars that converts euros to dollars
def euro_dollars(amount_euros):
    """
    Converts an amount of euros to dollars using the current exchange rate.

    Parameters:
    amount_euros (float): Amount in euros.

    Returns:
    float: Equivalent amount in dollars.
    """
    final_amount = amount_euros * 1.06
    return final_amount

# Tests with different amounts in euros
print(euro_dollars(amount_euros=1))
print(euro_dollars(3.5))
print(euro_dollars(amount_euros=10))

# Definition of a function dollars_euro that converts dollars to euros
def dollars_euro(dollar):
    """
    Converts an amount of dollars to euros using the current exchange rate.

    Parameters:
    dollar (float): Amount in dollars.

    Returns:
    float: Equivalent amount in euros.
    """
    return dollar * 0.84

# Tests with different amounts in dollars
dollars_euro(1)
dollars_euro(3.5)
dollars_euro(10)

# Function that switches between the euro_dollars and dollars_euro functions depending on the currency to convert
def convert_euro_dollar(amount, is_dollar=True):
    """
    Converts an amount from one currency to another.

    Parameters:
    amount (float): Amount to convert.
    is_dollar (bool): True if the original currency is the dollar, False if it's the euro.

    Returns:
    float: Converted amount.
    """
    if is_dollar:
        res = dollars_euro(amount)
    else:
        res = euro_dollars(amount)
    return res