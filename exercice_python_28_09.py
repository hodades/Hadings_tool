# -*- coding: utf-8 -*-
"""exercice python 28 09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ymqlcTTofcY7y8nkzpggyuqNcQB7hGXK

#While Loop
"""

# 1. Write a function with 2 arguments that prints all the odd or even numbers
# between 1 and the first parameter. The second parameter tells you if you have
# to print odd or even numbers


def n_print(n,odd_or_even):
    if odd_or_even == "impair":
        for i in range(1, n + 1, 2):
            print(i)
    elif odd_or_even == "pair":
        for i in range(2, n + 1, 2):
            print(i)

def n_print(n,odd_or_even):
    i = 1
    while i<=n:
      if odd_or_even == "impair" and i%2!=0:
            print(i)
      elif odd_or_even == "pair" and i%2==0:
            print(i)
      i=i+1


#Yasmine

def odd_or_even(num,num_type) :
  i=1
  if num_type == "odd" :
    while i <= num : #continue while i is inferior or equal to num
      if i % 2 != 0 : #for print only the odd numbers
        print(i) #print all our i odd numbers
      i += 1 #add 1 to i
  elif num_type == "even" :
    while i <= num :
      if i % 2 == 0 : #for print only the even numbers
        print(i)
      i += 1


odd_or_even(9, "odd")

# 2. Write a for loop that prints the largest number in a list
# without using min() or max() monthly_savings = 100

myList = [4,5,3,5,2,50]
def max_perso(mylist) :
  maxMylist = mylist[0]
  for i in mylist :
    if i > maxMylist :
      maxMylist = i
  return maxMylist

max_perso([1,2,3])

# christ
lst = [1,7,3,-1,123,95]
maxLst = lst[0] #1

i = 0
while i < len(lst) :
     if lst[i] > maxLst :
         maxLst = lst[i]
     i+=1

print(max)

# 3. Write a Python function that takes a list of numbers as input
# and returns the sum of all the even numbers in the list.

# christ
def sum_even(lst):
    i =0
    sum_lst = 0
    while i < len(lst) :
        if lst[i] % 2 == 0:
            sum_lst  += lst[i]
        i += 1
    return sum_lst

print(sum_even([1,2,3,4]))

"""#Dictionnary"""

# 1. Write a Python function that takes a dictionary as input and
# returns a new dictionary where all the keys have been converted to lowercase.
def lower_dict(input_dict):
    # Create an empty dictionary to store the lowercase key-value pairs.
    lowercase_dict = {}
    # Iterate over the items in the input dictionary.
    for key, value in input_dict.items():
        # Convert the key to lowercase and add it to the new dictionary with the original value.
        lowercase_dict[key.lower()] = value
    # Return the new dictionary with lowercase keys.
    return lowercase_dict

# 2. Write a Python function that takes a dictionary as input and
# returns a new dictionary where all the values have been doubled.
def double_dict(input_dict):
    # Create a new dictionary to store doubled values.
    doubled_values_dict = {}
    # Iterate over the items in the input dictionary.
    for key, value in input_dict.items():
        # Double the value and add it to the new dictionary with the same key.
        doubled_values_dict[key] = value * 2
    # Return the new dictionary with doubled values.
    return doubled_values_dict

# Example usage for doubling values in a dictionary:
input_dict = {1: 1, 2: 2, 3: 3}
output_dict = double_dict(input_dict)
print(output_dict)

"""#HOMEWORK"""

# Definition of the function slow_down with a 'speed' argument.
def slow_down(speed):
    # Check if the speed is greater than 48.
    if speed > 48:
        # If yes, reduce the speed by 11.
        speed -= 11
        # Create a string with a message indicating a significant slowdown
        # and display the new speed.
        res = "Slow down big time! Now the speed should be " + str(speed)
    else:
        # If the speed is less than or equal to 48, reduce the speed by 6.
        speed -= 6
        # Create a string with a message indicating a slight slowdown
        # and display the new speed.
        res = "Slow down! " + str(speed)
    # Return the string 'res' containing the message.
    return res

# Call the slow_down function with a speed of 44.
slow_down(44)

# Call the slow_down function again with a speed of 44 and store the result in 'x'.
x = slow_down(44)

# Display the value of 'x', which contains the message generated by the slow_down function.
print(x)

# Definition of the function purchased_but_not_subscribed with 'customers' and 'newsletter_subscribers' arguments.
def purchased_but_not_subscribed(customers, newsletter_subscribers):
    # Check if both 'customers' and 'newsletter_subscribers' are sets.
    if type(customers) == set and type(newsletter_subscribers) == set:
        # Find the set difference between 'customers' and 'newsletter_subscribers'.
        result = customers.difference(newsletter_subscribers)
    # Check if both 'customers' and 'newsletter_subscribers' are lists.
    elif type(customers) == list and type(newsletter_subscribers) == list:
        # Convert 'customers' and 'newsletter_subscribers' to sets.
        customers = set(customers)
        newsletter_subscribers = set(newsletter_subscribers)
        # Find the set difference between 'customers' and 'newsletter_subscribers'.
        result = customers.difference(newsletter_subscribers)
    else:
        # If the input types are not valid, set the result to a message indicating that they should be converted to sets or lists.
        result = "convert to set or list"

    # Return the result, which will be either the set difference or an error message.
    return result

# Call the purchased_but_not_subscribed function with example input data.
purchased_but_not_subscribed(customers=[1, 2, 3, 4, 4, 5, 4, 57], newsletter_subscribers=[1, 2, 4, 6, 7, 8, 8, 32, 536])